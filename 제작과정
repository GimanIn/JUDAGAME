코드 유실로 인한 이슈로 인해 코드 업로드불가.
코드 캡처본은 존재함.



연구 수행 과정
• 1차시
1. pygame 설치
2. visual stupygame 설치
2. visual studio coad 설치
3. visual studio coad 상세설정
visual studio coad에 explore 탭에서 폴더와 파일을 만든 다음, Python extension을 설치한다.  

  

• 2차시
1. 프레임 설정

먼저 구성을 파이 게임을 선언해주고 게임을 실행하기 위해 초기화시킨다. 그리고 크게 화면 크기 설정, 화면 타이틀 설정, 이벤트 루프로 틀을 잡은 다음 게임을 종료시킨다. 화면 크기 설정에서 배경 화면의 가로 480픽셀, 세로 640픽셀로 선언한다. 화면 타이틀 설정에서 게임 이름을 각 성을 가져와 ‘Juda Game’으로 정하였고 선언하였다. 이벤트 루프에서 pygame event get은 이벤트 종류를 나타내는 정수로 종료되지 않도록 계속 진행하면서 입력 체크를 확인 처리하는 이벤트이다. 만약 while문을 빠져나와 창이 닫히는 이벤트가 발생하면 게임 진행을 멈추는 코드를 작성하였다.

2. 배경 화면 삽입

앞에서 선언한 크기의 png 파일을 같은 파일에 저장하여 배경 이미지를 불러온 다음, 이벤트 루트 부분에 스크린에 나올 수 있도록 배경을 불러오는 코드를 작성하였다. 다음 사진은 코드를 실행하여 배경 화면 이미지를 불러온 사진이다.


3. 캐릭터 삽입

파이 게임에서의 캐릭터를 삽입하는 기술을 스프라이트라고 부르며, 컴퓨터 그래픽스에서 스프라이트는 영상 속에 작은 2차원 비트맵이나 애니메이션을 합성하는 기술이다. 배경 화면과 같이 사진 경로를 작성하여 불러오고 가로 70픽셀, 세로 70픽셀로 크기를 선언한다. 캐릭터 설정할 때 가로를 0으로 선언하는 이유는 폭 없는 공백을 설정하기 위함으로, 공백 없이 공백의 효과를 내어 바이트를 줄여주는 효과를 준다. 여기서 폭 없는 공백이란 컴퓨터의 조판에 사용되는 비표시 문자로 문자 처리 시스템에 대해서 단어의 단락이다. 캐릭터의 x 위치는 화면 가로 크기의 절반 크기에 해당하는 곳에 위치하기 위해 스크린 가로 크기의 절반에서 캐릭터 가로 크기의 절반을 빼준다. 스크린 가로 크기의 절반만 있다면 절반 되는 점에서 시작하기 때문에 캐릭터가 정중앙에 위치할 수 없다. 캐릭터의 y 위치는 화면 세로 크기에서 가장 아래에 해당하는 곳에 위치하기 위해 스크린 세로 크기에서 캐릭터 세로 크기를 빼준다. 스크린 세로 크기만 있다면 캐릭터가 보이지 않을 것이다. 마지막으로 이벤트 루프에서 스크린에 보일 수 있도록 캐릭터의 위치를 선언해주는 코드를 작성하였다. 다음 사진은 코드를 실행하여 배경 화면과 캐릭터 이미지를 불러온 사진이다.

• 3차시

키보드 이벤트를 설정하였다. 캐릭터는 (0, 0)이기 때문에 캐릭터 위치를 설정하였던 화면의 가로는 정중앙, 세로는 제일 아래에 위치할 것이다. 게임이 진행 중이고 종료되지 않도록 확인하고 있는 코드에서 pygame.keydown을 통해 키가 눌러졌는지 확인한다. pygame.keydown은 pygame event 종류 중 하나로 키보드를 눌렀을 때 발생한다. 만약 왼쪽이 눌러졌다면 왼쪽으로 5만큼, 오른쪽이 눌러졌다면 오른쪽으로 5만큼, 위쪽이 눌러졌다면 위쪽으로 5만큼, 아래쪽으로 눌러졌다면 아래쪽으로 5만큼 이동하는 코드를 작성하였다.


마찬가지로 pygame.keyup을 통해 키가 눌러지지 않았는지 확인한다. pygame.keyup은 pygame event 종류 중 하나로 키보드를 누른 후 뗄 때 발생한다. 만약 방향키를 떼었을 때 이벤트가 발생하여도 캐릭터의 위치는 변하지 않는다. 캐릭터가 스크린 밖으로 나오는 것을 방지하기 위해 가로 경곗값과 세로 경곗값을 처리하는 코드를 작성하였다.
• 4차시
1. FPS 설정


FPS는 frames per second의 약자이며 초당 프레임 수, 즉 이동 속도를 의미한다. FPS를 0.8로 설정하고 dt를 곱해 초를 기준으로 움직이게 설정하는 코드를 작성하였다. 

2. enemy 생성

캐릭터와 마찬가지로 적의 캐릭터를 가로 70픽셀, 세로 70픽셀로 저장하고 저장한 이동 경로를 이미지를 불러 넣는 코드에 작성한다. 이때 \\ 혹은 /을 사용해야 한다. 나머지는 앞에서 설명했던 캐릭터와 동일하다.

3. 충돌 처리

충돌 처리를 위한 rect 정보를 업데이트하는 코드를 작성하였다 여기서 rect 함수란 사각형을 그릴 때 사용하는 함수로 예를 들어 rect(1, 1, 3, 3)이면 (1, 1), (3, 3) 점이라고 할 수 있다. rect.dolliderect는 파이 게임에서 충돌 탐지하는 함수로 사각형 기준으로 탐지한다. 스크린에 나오기 위해 screen blit의 코드를 작성하였다. 그리고 충돌하면 “충돌”이란 글을 출력하며 게임이 종료된다.

• 5차시
1. 텍스트 폰트 정의

폰트는 기본 시스템 폰트를 사용하기 위해 None, 크기는 40으로 설정한다. 게임을 자동으로 종료하기 위해 먼저 총 시간을 10초로 설정한다. 시작 tick을 받아오는 코드를 작성하였다. 여기서 tick은 눈금, 시간(초)을 의미한다.

2. 타이머 설정
   

경과 시간은 앞에서 설정한 총 시간에서 시작 시간을 뺀 다음, 초 단위로 표시하기 위해 1000을 나눈다. 타이머를 str(문자), int(정수)로 정의하고 render함수를 활용하여 text, antialias, color를 설정한다. text는 경과 시간, antialias는 위신호 제거라는 뜻으로 높은 해상도의 신호를 낮은 해상도에서 나타낼 때 생기는 계단 현상(깨진 패턴)을 최소화하는 방법이다. color는 RGB color인 (255,255,255)로 설정하였다. 만약 시간이 0 이하면 “시간 끝. 빨리 좀 하지 ㅋ”이라는 글이 출력되고 1초 정도 대기를 하였다가 자동으로 종료되는 코드를 작성하였다. 

• 6차시
1. 게임 개발 프레임


‘pokemonball game’을 만들기 위해 앞서 만들었던 ‘Juda game’에서 사용해야 할 코드만 남기고 게임 개발에 필수적인 코드만 남겨놓는다.

2. pokemonball game 구상

정식적으로 pokemonball game을 제작하기 위해서 원하는 배경 화면, 캐릭터, 적 사진을 png 형식으로 미리 저장하고 경로를 적어놓는다. 또한 적이 무작위 위치에서 떨어져 캐릭터와 충돌하면 게임이 종료되는 것으로 구상하고 게임 개발을 시작하였다.
